generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Group {
  NONE
  PA
  STAFF
  ADMIN
}

enum Gender {
  Male
  Female
  NonBinary
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  role              String             @default("user")
  contactNumber     String?            @default("")
  nin               String?            @default("")
  dob               String?            @default("")
  position          String?            @default("")
  gender            Gender?
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  imageKey          String?
  groups            UserGroup[]
  accounts          Account[]
  sessions          Session[]
  emergencyContacts EmergencyContact[]

  @@map("users")
}

model UserGroup {
  id     String @id @default(cuid())
  userId String
  group  Group

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, group]) // prevent duplicates
}

model EmergencyContact {
  id            String  @id @default(cuid())
  name          String
  contactNumber String
  relationship  String
  isPrimary     Boolean @default(false)
  User          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
